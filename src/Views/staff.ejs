<div class="container">    
    <span id="message"></span>
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-3 ">
                    <input type="text" name="search" id="search" class="form-control" placeholder="Tìm kiếm"/>
                </div>
                <div class="col-2">
                    <button type="button" id="search" class="btn btn-success   search">Tìm kiếm</button>
                </div>
                <div class="col-6">
                    <button type="button" id="add_data" class="btn btn-primary float-end">Add</button>
                </div>                
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-bordered" id="roomtype_data">
                    <thead>
                        <tr>
                            <th scope="col">STT</th>
                            <th scope="col">username</th> 
                            <th scope="col">Chi Nhánh</th>                           
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="card-text pages row justify-content-center"  id="pages">
            
                </div>
            </div>
        </div>
    </div>
</div>
  

<div class="modal" tabindex="-1" id="actionModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" id="sample_form" class="sample_form">
                <div class="modal-header" id="dynamicModalTitle">
                    <h5 class="modal-title"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 ">
                        <label class="form-label">username</label>
                        <input type="text" name="username" id="username" class="form-control username" required />
                    </div>
                    <div class="mb-3 ">
                        <label class="form-label">Password</label>
                        <input type="password" name="password" id="password" class="form-control username" required />
                    </div>
                    <div class="mb-3 ">
                        <label class="form-label">Chi Nhánh</label>
                        <select name="branchtype" id="branchtype" class="form-select branchtype">
                    </div>
                                     
                </div>
                <div class="modal-footer">
                    <input type="hidden" name="id" id="id" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="actionButton">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    var rowInPage = 10;
    var lastPage = 1;
    var pages = 1;
    const viewMode = ["GET", "POST", "PUT", "DELETE"];
    var indexMode = "GET";
    var _branchtype =`
    `;

    const user = JSON.parse(localStorage.getItem('user'));
    var token = "";
    if (user && user.accessToken) {
        
        token = `Bearer ${user.accessToken}`
    }

    const displaypages = (pages, current, lastPage) =>{
        var firstPage = 1;
        var bodyPages = ``;
        if(pages > 0) { 
            bodyPages += `
            <div class="justify-content-center">
            <nav class="mx-auto justify-content-center">
            <ul class="pagination justify-content-center" style="margin-top: 2rem;">`;
            if(current === 1) { 
                bodyPages += `
                <li class="page-item disabled">
                    <button class="page-link pagesindex" id="pagesindex" data-id="`+firstPage+`">First</button>                
                </li>`;
            } else { 
                bodyPages += `
                <li class="page-item">
                    <button class="page-link pagesindex" id="pagesindex" data-id="`+firstPage+`">First</button>
                </li>`
            } 
            var i = (Number(current) > 3 ? Number(current) - 2 : 1) 
  
            if(i !== 1) { 
                bodyPages += `
                <li class="page-item disabled">
                    <button class="page-link" >...</button>
                </li>`
            } 
            for(; i <= (Number(current) + 2) && i <= pages; i++) {
                if(i == current) { 
                    bodyPages += `
                    <li class="page-item active">
                        <button class="page-link pagesindex" id="pagesindex" data-id="`+i+`">${i}</button>                    
                    </li>`;
                } else { 
                    bodyPages += `
                    <li class="page-item">
                        <button class="page-link pagesindex" id="pagesindex" data-id="`+i+`">${i}</button>
                    </li>`
                } 
                if (i == Number(current) + 2 && i < pages) { 
                    bodyPages += `
                    <li class="page-item disabled">
                        <button class="page-link" >...</button>
                    </li>`
                } 
            }
        
            if(current === pages) { 
                bodyPages += `
                <li class="page-item disabled">
                    <button class="page-link pagesindex" id="pagesindex" data-id="`+lastPage+`">Last</button>                
                </li>`
            } else { 
                bodyPages += `
                <li class="page-item">
                    <button class="page-link pagesindex" id="pagesindex" data-id="`+pages+`">Last</button>                
                </li>`
            }
            bodyPages += `
                </ul>
            </nav>
            </div>
            `;
        } 
        document.querySelector('#pages').innerHTML = bodyPages;
    }
    const displayRoom = (rowInPage, _stt, datas) => {
        var html =``;  
        for(var count = 0; count < rowInPage; count++) {
                let data = datas[count];
                _stt++;
                
                            html += `
                            <tr>
                                <td>`+ _stt +`</td>
                                <td>`+data.username+`</td>
                                <td>`+data.branchname+`</td>
                                <td>
                                    <button type="button" class="btn btn-warning btn-sm edit" data-id="`+data.id+`">
                                        Edit
                                    </button>
                                    &nbsp;
                                    <button type="button" class="btn btn-danger btn-sm delete" data-id="`+data.id+`">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                            `;
                             
            }                    
          
        document.querySelector('#roomtype_data tbody').innerHTML = html;                 
    }
   

    $(document).ready( function(){
            
        load_data();
    
        function load_data()
        {           
            console.log("load_data")
            $.ajax({
                
                url: '/staff/all',
                method: viewMode[0],
                headers: {
                    'Authorization':token
                },
                dataType : "JSON",
                success:function( data) { 
                    console.log(data)
                    if(data && data.success === false && data.statusCode === 400) {
                        alert("Vui lòng đăng nhập lại")
                        window.location.assign('/login')
                    }  
                    if(data.success && data.branchs) {
                        for(let index = 0 ; index <data.branchs.length  ; index++) {
                            let _index = index + 1;
                            _branchtype = `<option value="` + data.branchs[index].id+`">` 
                                + data.branchs[index].branchname + `</option>
                            ` + _branchtype;
                        }                        
                        _branchtype += `
                        `; 
                    }
                    if(data.success && data.data.length > 0) {
                        rowInPage = data.rowInPage
                        pages = Math.ceil(data.data.length/rowInPage)
                        const current = 1;
                        lastPage = Math.ceil(data.data.length/rowInPage)
                        const _stt = 0;
                        let row = data.data.length;
                        if(row > rowInPage) {
                            row = rowInPage
                        } 
                        displaypages(pages, current, lastPage);
                        displayRoom(row, _stt, data.data)
                        
                    } 
                    indexMode = viewMode[1];
                }
            });
        }
    
        $('#add_data').click(function(){
            indexMode = viewMode[1];
            console.log("add_data")
            document.querySelector('#sample_form div div .branchtype').innerHTML = _branchtype;

            $('#dynamicModalTitle').text('Add Staff');
    
            $('#sample_form')[0].reset();
    
            $('#action').val('Add');
    
            $('#actionButton').text('Add');
    
            $('#actionModal').modal('show');
    
        });
    
        $('#sample_form').on('submit', function(event){
    
            event.preventDefault();
            
            $.ajax({
                url:'/staff',
                method:indexMode,
                headers: {
                    'Authorization':token
                },
                data:$('#sample_form').serialize(),
                dataType:"JSON",
                beforeSend:function(){
                    $('#actionButton').attr('disabled', 'disabled');
                },
                success:function(data)
                {
                    if(data && data.success === false ) {
                        alert("Vui lòng đăng nhập lại")
                        window.location.assign('/login')
                    } 
                    if(data && data.success){
                        $('#actionButton').attr('disabled', false);

                        document.querySelector('#message').innerHTML = '<div class="alert alert-success">'+data.message+'</div>';
            
                        $('#actionModal').modal('hide');
        
                        load_data();
        
                        setTimeout(function(){
                            document.querySelector('#message').innerHTML = '';
                        }, 5000);
                    } else {
                        alert("Error")
                    }
                    
                }
            });
    
        });
        
        $(document).on('click', '.edit', function(){
            document.querySelector('#sample_form div div .branchtype').innerHTML = _branchtype;
            var id = $(this).data('id');          
            
    
            $.ajax({
                url:`/staff/${id}`,
                method: viewMode[0],
                headers: {
                    'Authorization':token
                },
                dataType:"JSON",
                success:function(data) {
                    if(data && !data.success ) {
                        alert("Vui lòng đăng nhập lại")
                        window.location.assign('/login')    
                    } 
                    if( data.success  ) {  
                        console.log(data)                      
                        $('#dynamicModalTitle').text('Edit Data');
    
                        $('#action').val('Edit');
                            
                        $('#actionButton').text('Edit');
                        $('#actionModal').modal('show');
                        const tempData = data.data;
                        indexMode = viewMode[2];
                        $('#username').val(tempData.username);
                        $('#branchtype').val(tempData.branchtype);
                        $('#id').val(tempData.id);
                    }                   
                    
                }
            });    
        });

        $(document).on('click', '.pagesindex', function(){
            var id = $(this).data('id');
            id = parseInt(id);
            $.ajax({
                url: `/staff/page/${id-1}0/${rowInPage}`,
                method: viewMode[0],
                headers: {
                    'Authorization':token
                },
                dataType : "JSON",
                success:  function(data)
                {
                    if(data && data.success === false && data.statusCode === 400) {
                        alert("Vui lòng đăng nhập lại")
                        window.location.assign('/login')
                    } 
                    console.log(data);
                    let _stt = id-1 + "" + 0;
                    _stt = parseInt(_stt)
                    
                    displaypages(pages, id, lastPage);
                    const row = parseInt(data.data.length);
                    displayRoom(row, _stt, data.data)
                }
            })
        });
        

        $(document).on('click', '.search', function(){
            let search = document.getElementById('search').value;
            $.ajax({
                url: `/staff/search`,
                method: viewMode[1],
                headers: {
                    'Authorization':token
                },
                data: {search: search},
                dataType : "JSON",
                success:  function( data)
                {
                    if(data.data && data.data.length > 0) {
                        pages = Math.ceil(data.data.length/rowInPage)
                        const current = 1;
                        lastPage = Math.ceil(data.data.length/rowInPage)
                        const _stt = 0;
                        var row = 0;
                        if(data.data.length < rowInPage){
                            row = data.data.length;
                        } else {
                            row = rowInPage;
                        }
                        displaypages(pages, current, lastPage);
                        displayRoom(row, _stt, data.data)
                    } else {
                        alert("Dữ liệu tìm kiếm không phù hợp")
                    }
                }
            })
        });
    
    
        $(document).on('click', '.delete', function() {
    
            var id = $(this).data('id');    
            if(confirm("Are you sure you want to delete this data?"))
            {                
                $.ajax({
                    url:'/staff',
                    method: viewMode[3],
                    headers: {
                    'Authorization':token
                    },
                    data: {id: id},
                    dataType:"JSON",
                    success:function(data)
                    {
                        if(data.success) {
                            document.querySelector('#message').innerHTML = '<div class="alert alert-success">'+data.message+'</div>';
                            load_data();
                            setTimeout(function(){
                                document.querySelector('#message').innerHTML = '';
                            }, 5000);
                        } else {
                            alert("Error");
                        }
                        
                    }
                });
            }    
        });
    });
    
    </script>